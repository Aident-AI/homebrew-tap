#!/bin/bash

APP_DIR="$HOME/.open-cuak"
LIBEXEC_DIR="$(dirname "$(realpath "$0")")"

init() {
  echo "Initializing Open-CUAK services..."

  mkdir -p "$APP_DIR"
  if [ -d "$APP_DIR/repo" ]; then
    echo "Removing existing repository directory..."
    rm -rf "$APP_DIR/repo"
  fi

  echo "Pulling latest code from repository..."
  curl -L https://github.com/Aident-AI/open-cuak/archive/refs/heads/main.zip -o "$APP_DIR/main.zip"
  unzip "$APP_DIR/main.zip" -d "$APP_DIR/temp"
  mv "$APP_DIR/temp/open-cuak-main" "$APP_DIR/repo"
  rm -rf "$APP_DIR/temp"
  rm "$APP_DIR/main.zip"
}

start_services() {
  if [ ! -d "$APP_DIR" ]; then
    echo "App not initialized. Starting app initialization..."
    init
  fi

  current_docker_context=$(docker context show | grep -o 'colima')
  if [ "$current_docker_context" = "colima" ]; then
    default_to_colima=true
  else
    default_to_colima=false
  fi
  if [ ! $default_to_colima ]; then
    echo "Setting Docker context to colima..."
    docker context use colima
  else 
    echo "Docker context already set to colima..."
  fi

  echo "Starting colima VM..."
  colima start --cpu 4 --memory 8 --disk 30 --mount-type virtiofs
  cd "$APP_DIR/repo" && bash quick-start.sh

  if [ !default_to_colima ]; then
    echo "Setting Docker context back to default..."
    docker context use default
  fi
}

stop_services() {
  echo "Stopping OpenCUAK services..."
  colima stop
}

restart_services() {
  if colima status &>/dev/null; then
    if colima list | grep -q "Running"; then
      echo "Open-CUAK services already running..."
      cd "$APP_DIR/repo" && bash quick-stop.sh
      cd "$APP_DIR/repo" && bash quick-start.sh
      return 0
    else
      echo "VM exists but not running. Starting Open-CUAK services..."
      start_services
    fi
  else
    echo "Colima VM does not exist. Starting the services from scratch..."
    start_services
  fi
}

clear() {
  echo "Clearing Open-CUAK services and data..."
  colima delete
}

status() {
  vm_ready=false
  server_ready=false
  supabase_ready=false
  supabase_username=""
  supabase_password=""
  if colima list 2>/dev/null | grep -q "Running"; then
    vm_ready=true
  fi

  get_env_value() {
    local file="$1"
    local key="$2"
    local value=""
    
    if [ -f "$file" ]; then
      value=$(grep "^${key}=" "$file" | sed "s/^${key}=//")
      value=$(echo "$value" | sed -e 's/^["\x27]//' -e 's/["\x27]$//')
    fi
    echo "$value"
  }

  app_env_path="$APP_DIR/repo/.env.production"
  supabase_env_path="$APP_DIR/repo/installer/supabase-docker/.env"
  if [ ! -f "$app_env_path" ]; then
    echo "App environment file not found at $app_env_path"
    exit 1
  fi
  if [ ! -f "$supabase_env_path" ]; then
    echo "Supabase environment file not found at $supabase_env_path"
    exit 1
  fi

  app_host=$(get_env_value "$app_env_path" "NEXT_PUBLIC_ORIGIN")
  supabase_host=$(get_env_value "$app_env_path" "NEXT_PUBLIC_SUPABASE_URL")
  supabase_username=$(get_env_value "$supabase_env_path" "DASHBOARD_USERNAME")
  supabase_password=$(get_env_value "$supabase_env_path" "DASHBOARD_PASSWORD")

  if $vm_ready; then
    response=$(curl -s -X POST -d "{}" "$app_host/api/ping")
    if echo "$response" | grep -q '"message":"pong"'; then
      server_ready=true
    fi

    if curl -s $supabase_host &>/dev/null; then
      supabase_ready=true
    fi
  fi

  echo "VM Ready: $vm_ready"
  echo "Server Ready: $server_ready"
  echo "Supabase Ready: $supabase_ready"
  if $supabase_ready; then
    echo "Service Status:"
    echo "  - OpenCUAK: http://localhost:3000"
    echo "  - Supabase Dashboard: http://localhost:8000"
    echo "    |- username: $supabase_username"
    echo "    |- password: $supabase_password"
  fi
}

stats() {
  docker context use colima
  docker stats
  docker context use default
}

help() {
  echo "Usage: open-cuak {init|start|stop|restart|clear|status|stats|help}"
  echo "Commands:"
  echo "  init      - Initialize Open-CUAK services"
  echo "  start     - Start Open-CUAK services"
  echo "  stop      - Stop Open-CUAK services"
  echo "  restart   - Restart Open-CUAK services"
  echo "  clear     - Clear Open-CUAK services and data"
  echo "  status    - Show the status of Open-CUAK services"
  echo "  stats     - Show Docker stats"
  echo "  help      - Show this help message"
}

case "$1" in
  init) init ;;
  start) start_services ;;
  stop) stop_services ;;
  restart) restart_services ;;
  clear) clear ;;
  status) status ;;
  stats) stats ;;
  help) help ;;
  *) help ;;
esac
