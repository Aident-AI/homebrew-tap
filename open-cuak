#!/bin/bash

APP_DIR="$HOME/.open-cuak"
LIBEXEC_DIR="$(dirname "$(realpath "$0")")"
DOCKER_CMD="docker --context colima"

# Detect the OS
OS_TYPE=$(uname)
BASH_CMD="bash"
RM_DIR_CMD="rm -rf"
if [ "$OS_TYPE" == "Linux" ]; then
  echo "Linux detected, using sudo"
  BASH_CMD="sudo -E bash"
  RM_DIR_CMD="sudo rm -rf"
fi

init() {
  # Check for --reset parameter
  RESET_MODE=false
  if [ "$1" == "--reset" ]; then
    RESET_MODE=true
    echo "Reset mode enabled. Will clear existing repository and docker images..."
  fi

  echo "Initializing Open-CUAK services..."

  mkdir -p "$APP_DIR"

  # Handle repo directory based on reset mode
  if [ -d "$APP_DIR/repo" ]; then
    if [ "$RESET_MODE" = true ]; then
      echo "Removing existing repository directory..."
      $RM_DIR_CMD "$APP_DIR/repo"
    else
      echo "Repository directory already exists. Use --reset to force reinitialization."
    fi
  fi

  # Only proceed with repo download if it doesn't exist or we're in reset mode
  if [ ! -d "$APP_DIR/repo" ] || [ "$RESET_MODE" = true ]; then
    echo "Pulling latest code from repository..."
    curl -L https://github.com/Aident-AI/open-cuak/archive/refs/heads/main.zip -o "$APP_DIR/main.zip"
    unzip -q "$APP_DIR/main.zip" -d "$APP_DIR/temp" &>/dev/null
    mv "$APP_DIR/temp/open-cuak-main" "$APP_DIR/repo"
    $RM_DIR_CMD -rf "$APP_DIR/temp"
    $RM_DIR_CMD "$APP_DIR/main.zip"
    echo "Unzipped the repository to $APP_DIR/repo"
  fi

  # Check if docker-images directory exists, create it if not, or clear it if in reset mode
  DOCKER_IMAGES_DIR="$APP_DIR/docker-images"
  if [ -d "$DOCKER_IMAGES_DIR" ] && [ "$RESET_MODE" = true ]; then
    echo "Removing existing docker images directory..."
    $RM_DIR_CMD "$DOCKER_IMAGES_DIR"
  fi

  if [ ! -d "$DOCKER_IMAGES_DIR" ]; then
    echo "Creating docker-images directory at $DOCKER_IMAGES_DIR..."
    mkdir -p "$DOCKER_IMAGES_DIR"

    echo "Downloading Docker image archives..."
    # List of Docker image archives to download
    DOCKER_IMAGES=(
      "https://opencuak.blob.core.windows.net/docker-images/darthsim_imgproxy_v3.8.0.tar.gz"
      "https://opencuak.blob.core.windows.net/docker-images/ghcr.io_aident-ai_open-cuak-browserless_stable.tar.gz"
      "https://opencuak.blob.core.windows.net/docker-images/ghcr.io_aident-ai_open-cuak-web_stable.tar.gz"
      "https://opencuak.blob.core.windows.net/docker-images/kong_2.8.1.tar.gz"
      "https://opencuak.blob.core.windows.net/docker-images/postgrest_postgrest_v12.2.0.tar.gz"
      "https://opencuak.blob.core.windows.net/docker-images/supabase_edge-runtime_v1.67.0.tar.gz"
      "https://opencuak.blob.core.windows.net/docker-images/supabase_gotrue_v2.167.0.tar.gz"
      "https://opencuak.blob.core.windows.net/docker-images/supabase_logflare_1.4.0.tar.gz"
      "https://opencuak.blob.core.windows.net/docker-images/supabase_postgres-meta_v0.84.2.tar.gz"
      "https://opencuak.blob.core.windows.net/docker-images/supabase_postgres_15.8.1.020.tar.gz"
      "https://opencuak.blob.core.windows.net/docker-images/supabase_realtime_v2.34.7.tar.gz"
      "https://opencuak.blob.core.windows.net/docker-images/supabase_storage-api_v1.14.5.tar.gz"
      "https://opencuak.blob.core.windows.net/docker-images/supabase_studio_20250113-83c9420.tar.gz"
      "https://opencuak.blob.core.windows.net/docker-images/supabase_supavisor_1.1.56.tar.gz"
      "https://opencuak.blob.core.windows.net/docker-images/timberio_vector_0.28.1-alpine.tar.gz"
    )

    # Download each Docker image archive
    for image_url in "${DOCKER_IMAGES[@]}"; do
      filename=$(basename "$image_url")
      echo "Downloading $filename..."
      curl -L "$image_url" -o "$DOCKER_IMAGES_DIR/$filename"
      if [ $? -eq 0 ]; then
        echo "Successfully downloaded $filename"
      else
        echo "Failed to download $filename"
      fi
    done

    echo "All Docker image archives downloaded to $DOCKER_IMAGES_DIR"
  else
    echo "Docker images directory already exists at $DOCKER_IMAGES_DIR"
    if [ "$RESET_MODE" = false ]; then
      echo "Use --reset to force redownload of docker images."
    fi
  fi

  # Create necessary directories with correct permissions
  echo "Setting up required directories with proper permissions..."
  echo "Open-CUAK services initialized successfully."
}

load_images() {
  # Check if docker-images directory exists
  DOCKER_IMAGES_DIR="$APP_DIR/docker-images"
  if [ ! -d "$DOCKER_IMAGES_DIR" ]; then
    echo "No docker-images directory found at $DOCKER_IMAGES_DIR. Skipping image loading."
    return 0
  fi

  # Check if there are any .tar.gz files in the directory
  if ! ls "$DOCKER_IMAGES_DIR"/*.tar.gz >/dev/null 2>&1; then
    echo "No docker image archives found in $DOCKER_IMAGES_DIR. Skipping image loading."
    return 0
  fi

  echo "Found docker image archives in $DOCKER_IMAGES_DIR. Loading images..."

  # Create a temporary directory for extraction
  TEMP_DIR="$APP_DIR/temp_docker_images"
  mkdir -p "$TEMP_DIR"

  # Variable to track if we're in the process of cleaning up
  CLEANING_UP=false

  # Function to handle cleanup
  cleanup() {
    # Only run cleanup once
    if [ "$CLEANING_UP" = true ]; then
      return
    fi
    CLEANING_UP=true

    echo -e "\nInterrupted. Cleaning up..."

    # Kill any background processes we might have started
    if [ -n "$EXTRACT_PID" ] && kill -0 $EXTRACT_PID 2>/dev/null; then
      kill $EXTRACT_PID 2>/dev/null
    fi

    if [ -n "$LOAD_PID" ] && kill -0 $LOAD_PID 2>/dev/null; then
      kill $LOAD_PID 2>/dev/null
    fi

    if [ -n "$FEED_PID" ] && kill -0 $FEED_PID 2>/dev/null; then
      kill $FEED_PID 2>/dev/null
    fi

    # Remove temporary files
    rm -f "$TEMP_DIR"/*.tar 2>/dev/null
    rm -f /tmp/docker_load_output.* 2>/dev/null
    rm -f /tmp/docker_load_pipe.* 2>/dev/null
    rm -rf "$TEMP_DIR" 2>/dev/null

    echo "Cleanup completed. Exiting."
    exit 1
  }

  # Make sure we clean up the temp directory even if the script exits unexpectedly
  trap 'cleanup' EXIT INT TERM

  # Check if pv (pipe viewer) is available for progress bar
  if command -v pv >/dev/null 2>&1; then
    HAS_PV=true
  else
    HAS_PV=false
    echo "Note: Install 'pv' for better progress visualization (brew install pv)"
  fi

  # Function to get file size that works on both macOS and Linux
  get_file_size() {
    local file="$1"
    local size=0

    if [ "$OS_TYPE" == "Darwin" ]; then
      # macOS
      size=$(stat -f%z "$file" 2>/dev/null)
    else
      # Linux and others
      size=$(stat -c%s "$file" 2>/dev/null)
    fi

    echo "$size"
  }

  # Function to convert bytes to MB with 2 decimal places
  bytes_to_mb() {
    local bytes="$1"
    echo "scale=2; $bytes/1048576" | bc
  }

  # Process each .tar.gz file
  for archive in "$DOCKER_IMAGES_DIR"/*.tar.gz; do
    filename=$(basename "$archive")
    image_name="${filename%.tar.gz}"

    echo "Processing image archive: $filename"

    # Get file size for progress reporting
    FILE_SIZE=$(get_file_size "$archive")
    TOTAL_SIZE_MB=$(bytes_to_mb "$FILE_SIZE")

    # Extract the .tar.gz file to get the .tar file
    echo "  Extracting archive (${TOTAL_SIZE_MB} MB)..."

    if $HAS_PV; then
      # Use pv to show progress bar
      pv -s $FILE_SIZE "$archive" | gunzip >"$TEMP_DIR/${image_name}.tar"
      EXTRACT_STATUS=$?
      if [ $EXTRACT_STATUS -ne 0 ]; then
        echo "  Extraction failed. Skipping this image."
        continue
      fi
    else
      # Simple progress indicator without pv
      (
        # Create a background process to extract the file
        gunzip -c "$archive" >"$TEMP_DIR/${image_name}.tar" &
        EXTRACT_PID=$!

        # Track progress while extraction is running
        while kill -0 $EXTRACT_PID 2>/dev/null; do
          if [ -f "$TEMP_DIR/${image_name}.tar" ]; then
            CURRENT_SIZE=$(get_file_size "$TEMP_DIR/${image_name}.tar")
            CURRENT_SIZE_MB=$(bytes_to_mb "$CURRENT_SIZE")
            PERCENT=$(echo "scale=2; $CURRENT_SIZE*100/$FILE_SIZE" | bc)

            # Print progress and overwrite the line
            printf "\r  Progress: %s MB / %s MB (%.2f%%)" "$CURRENT_SIZE_MB" "$TOTAL_SIZE_MB" "$PERCENT"
          fi
          sleep 0.5
        done

        # Make sure we end with a newline
        echo ""

        # Wait for extraction to complete
        wait $EXTRACT_PID
        EXTRACT_STATUS=$?
        if [ $EXTRACT_STATUS -ne 0 ]; then
          echo "  Extraction failed. Skipping this image."
          continue
        fi
      )
    fi

    # Load the image into Docker
    echo "  Loading image into Docker..."

    # Get the size of the tar file for progress reporting
    TAR_SIZE=$(get_file_size "$TEMP_DIR/${image_name}.tar")
    TAR_SIZE_MB=$(bytes_to_mb "$TAR_SIZE")

    if $HAS_PV; then
      # Use pv to show progress bar for loading
      pv -s $TAR_SIZE "$TEMP_DIR/${image_name}.tar" | $DOCKER_CMD load
      LOAD_STATUS=$?
    else
      # Start a spinner for the loading process
      echo -n "  Loading: "

      # Create a named pipe for better signal handling
      PIPE_NAME="/tmp/docker_load_pipe.$$"
      mkfifo "$PIPE_NAME" 2>/dev/null

      # Start Docker load in background, reading from the pipe
      $DOCKER_CMD load <"$PIPE_NAME" >/tmp/docker_load_output.$$ 2>&1 &
      LOAD_PID=$!

      # Start a background process to feed the tar file to the pipe
      (cat "$TEMP_DIR/${image_name}.tar" >"$PIPE_NAME") &
      FEED_PID=$!

      # Array of spinner characters
      SPINNER=('⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏')
      i=0

      # Show spinner while the load is running
      while kill -0 $LOAD_PID 2>/dev/null && kill -0 $FEED_PID 2>/dev/null; do
        echo -ne "\r  Loading: ${SPINNER[$i]} (${TAR_SIZE_MB} MB)"
        i=$(((i + 1) % 10))
        sleep 0.1
      done

      # Get the exit status
      wait $LOAD_PID
      LOAD_STATUS=$?

      # Make sure the feed process is terminated
      if kill -0 $FEED_PID 2>/dev/null; then
        kill $FEED_PID 2>/dev/null
      fi

      # Remove the named pipe
      rm -f "$PIPE_NAME" 2>/dev/null

      # Clear the spinner line
      echo -ne "\r\033[K"
    fi

    if [ $LOAD_STATUS -eq 0 ]; then
      echo "  Image loaded successfully."
    else
      echo "  Failed to load image. Continuing with next image..."
    fi

    # Remove the temporary .tar file
    rm -f "$TEMP_DIR/${image_name}.tar"
    # Also remove the temporary output file if it exists
    rm -f /tmp/docker_load_output.$$
  done

  # Clean up the temporary directory (this will also be done by the trap if something fails)
  rm -rf "$TEMP_DIR"

  # Reset traps to their default behavior
  trap - EXIT INT TERM

  echo "Docker image loading process completed."
}

start_services() {
  if [ ! -d "$APP_DIR" ]; then
    echo "App not initialized. Starting app initialization..."
    init
  fi

  # Check if colima VM exists
  vm_exists=false
  if colima status &>/dev/null; then
    vm_exists=true
  fi

  echo "Starting colima VM..."
  colima start --cpu 4 --memory 8 --disk 30 --mount-type virtiofs

  # Only load images if VM didn't exist before (new VM or previously deleted)
  if [ "$vm_exists" = false ]; then
    echo "New VM detected. Loading images..."
    load_images
  else
    echo "Existing VM detected. Skipping image loading..."
  fi

  cd "$APP_DIR/repo" && $BASH_CMD quick-start.sh --colima
}

stop_services() {
  echo "Stopping OpenCUAK services..."
  colima stop
}

restart_services() {
  if colima status &>/dev/null; then
    if colima list | grep -q "Running"; then
      echo "Open-CUAK services already running..."
      cd "$APP_DIR/repo" && $BASH_CMD quick-stop.sh --colima
      cd "$APP_DIR/repo" && $BASH_CMD quick-start.sh --colima
      return 0
    else
      echo "VM exists but not running. Starting Open-CUAK services..."
      # Set vm_exists to true before calling start_services to skip image loading
      vm_exists=true
      colima start --cpu 4 --memory 8 --disk 30 --mount-type virtiofs
      echo "Existing VM detected. Skipping image loading..."
      cd "$APP_DIR/repo" && $BASH_CMD quick-start.sh --colima
    fi
  else
    echo "Colima VM does not exist. Starting the services from scratch..."
    start_services
  fi
}

clear() {
  echo "Clearing Open-CUAK services and data..."
  colima delete
}

status() {
  vm_ready=false
  server_ready=false
  supabase_ready=false
  supabase_username=""
  supabase_password=""
  if colima list 2>/dev/null | grep -q "Running"; then
    vm_ready=true
  fi

  get_env_value() {
    local file="$1"
    local key="$2"
    local value=""

    if [ -f "$file" ]; then
      value=$(grep "^${key}=" "$file" | sed "s/^${key}=//")
      value=$(echo "$value" | sed -e 's/^["\x27]//' -e 's/["\x27]$//')
    fi
    echo "$value"
  }

  app_env_path="$APP_DIR/repo/.env.production"
  supabase_env_path="$APP_DIR/repo/installer/supabase-docker/.env"
  if [ ! -f "$app_env_path" ]; then
    echo "App environment file not found at $app_env_path"
    exit 1
  fi
  if [ ! -f "$supabase_env_path" ]; then
    echo "Supabase environment file not found at $supabase_env_path"
    exit 1
  fi

  app_host=$(get_env_value "$app_env_path" "NEXT_PUBLIC_ORIGIN")
  supabase_host=$(get_env_value "$app_env_path" "NEXT_PUBLIC_SUPABASE_URL")
  supabase_username=$(get_env_value "$supabase_env_path" "DASHBOARD_USERNAME")
  supabase_password=$(get_env_value "$supabase_env_path" "DASHBOARD_PASSWORD")

  if $vm_ready; then
    response=$(curl -s -X POST -d "{}" "$app_host/api/ping")
    if echo "$response" | grep -q '"message":"pong"'; then
      server_ready=true
    fi

    if curl -s $supabase_host &>/dev/null; then
      supabase_ready=true
    fi
  fi

  echo "VM Ready: $([ "$vm_ready" = true ] && echo "✅" || echo "❌")"
  echo "Server Ready: $([ "$server_ready" = true ] && echo "✅" || echo "❌")"
  echo "Supabase Ready: $([ "$supabase_ready" = true ] && echo "✅" || echo "❌")"
  if $supabase_ready; then
    echo "Service Status:"
    echo "  - OpenCUAK: $app_host"
    echo "  - Supabase Dashboard: $supabase_host"
    echo "    |- username: $supabase_username"
    echo "    |- password: $supabase_password"
  fi
}

stats() {
  $DOCKER_CMD stats
}

version() {
  # Show CLI version from Homebrew formula
  if command -v brew &>/dev/null; then
    # Check if the formula is installed via Homebrew
    if brew list open-cuak &>/dev/null; then
      # Try to get version directly from brew info command
      CLI_VERSION=$(brew info open-cuak --json | grep -o '"version":"[^"]*' | head -1 | cut -d'"' -f4)
      if [ -z "$CLI_VERSION" ]; then
        # Fallback to formula file if available
        FORMULA_PATH=$(brew formula open-cuak)
        if [ -f "$FORMULA_PATH" ]; then
          CLI_VERSION=$(grep -o 'url.*v[0-9][0-9.]*' "$FORMULA_PATH" | grep -o 'v[0-9][0-9.]*' | head -1)
        fi
      fi

      # Clean up the version string - remove any trailing periods or unwanted characters
      CLI_VERSION=$(echo "$CLI_VERSION" | sed 's/[.]$//' | tr -cd 'v0-9.')

      if [ -n "$CLI_VERSION" ]; then
        echo "Open-CUAK CLI Version: ${CLI_VERSION} (Homebrew)"
      else
        echo "Open-CUAK CLI Version: Unknown (Could not determine Homebrew version)"
      fi
    else
      echo "Open-CUAK CLI Version: Unknown (Not installed via Homebrew)"
    fi
  else
    # Fallback to VERSION file if Homebrew is not available
    VERSION_FILE="${LIBEXEC_DIR}/VERSION"
    if [ -f "$VERSION_FILE" ]; then
      CLI_VERSION=$(cat "$VERSION_FILE" | tr -d '[:space:]')
      echo "Open-CUAK CLI Version: $CLI_VERSION (from VERSION file)"
    else
      echo "Open-CUAK CLI Version: Unknown (VERSION file not found)"
    fi
  fi

  # Show App version
  example_env_path="$APP_DIR/repo/.example.env.production"

  if [ ! -d "$APP_DIR/repo" ]; then
    echo "Repository not initialized. Run 'open-cuak init' first."
    return 1
  fi

  if [ -f "$example_env_path" ]; then
    version=$(grep "^OPEN_CUAK_VERSION=" "$example_env_path" | sed "s/^OPEN_CUAK_VERSION=//")
    version=$(echo "$version" | sed -e 's/^["\x27]//' -e 's/["\x27]$//')

    if [ -n "$version" ]; then
      echo "Open-CUAK App Version: $version"

      if [ "$version" = "stable" ] || [ "$version" = "latest" ]; then
        echo "  |- Using $version release channel"
      else
        echo "  |- Using specific commit/tag: $version"
      fi
    else
      echo "Open-CUAK App Version: Not set"
    fi
  else
    echo "Open-CUAK App Version: Not available (example environment file not found)"
  fi

  # Check if colima is running
  if colima status &>/dev/null; then
    # Get open-cuak-web image info
    if $DOCKER_CMD ps --format '{{.Names}}' 2>/dev/null | grep -q "^open-cuak-web$"; then
      web_image_id=$($DOCKER_CMD inspect --format='{{.Image}}' open-cuak-web 2>/dev/null)
      web_image_info=$($DOCKER_CMD image inspect "$web_image_id" --format='{{index .RepoTags 0}} (SHA: {{.Id}})' 2>/dev/null)
      if [ -n "$web_image_info" ]; then
        echo "  |- open-cuak-web: $web_image_info"
      else
        echo "  |- open-cuak-web: Running but image info not available"
      fi
    else
      echo "  |- open-cuak-web: Not running"
    fi

    # Get open-cuak-browserless image info
    if $DOCKER_CMD ps --format '{{.Names}}' 2>/dev/null | grep -q "^open-cuak-browserless$"; then
      browserless_image_id=$($DOCKER_CMD inspect --format='{{.Image}}' open-cuak-browserless 2>/dev/null)
      browserless_image_info=$($DOCKER_CMD image inspect "$browserless_image_id" --format='{{index .RepoTags 0}} (SHA: {{.Id}})' 2>/dev/null)
      if [ -n "$browserless_image_info" ]; then
        echo "  |- open-cuak-browserless: $browserless_image_info"
      else
        echo "  |- open-cuak-browserless: Running but image info not available"
      fi
    else
      echo "  |- open-cuak-browserless: Not running"
    fi
  else
    echo "  |- Colima not running. Start services to view image information."
  fi
}

use() {
  example_env_path="$APP_DIR/repo/.example.env.production"

  if [ ! -d "$APP_DIR/repo" ]; then
    echo "Repository not initialized. Run 'open-cuak init' first."
    exit 1
  fi

  # A version must be provided as an argument
  if [ -z "$1" ]; then
    echo "Error: Version argument is required."
    echo "Usage: open-cuak use VERSION"
    echo "Example: open-cuak use stable"
    exit 1
  fi

  # Store the current version before changing it
  current_version=""
  if [ -f "$example_env_path" ] && grep -q "^OPEN_CUAK_VERSION=" "$example_env_path"; then
    current_version=$(grep "^OPEN_CUAK_VERSION=" "$example_env_path" | sed "s/^OPEN_CUAK_VERSION=//" | sed -e 's/^["\x27]//' -e 's/["\x27]$//')
  fi

  if [ ! -f "$example_env_path" ]; then
    echo "Example environment file not found at $example_env_path"
    echo "Creating new .example.env.production file..."
    touch "$example_env_path"
  fi

  # Check if OPEN_CUAK_VERSION already exists in the file
  if grep -q "^OPEN_CUAK_VERSION=" "$example_env_path"; then
    # Replace existing value
    sed -i.bak "s/^OPEN_CUAK_VERSION=.*$/OPEN_CUAK_VERSION=$1/" "$example_env_path"
    rm -f "${example_env_path}.bak"
  else
    # Add new value
    echo "OPEN_CUAK_VERSION=$1" >>"$example_env_path"
  fi

  echo "App version set to: $1"

  # Pull environment variables for all packages
  echo "Updating environment variables for all packages..."
  if [ -f "$APP_DIR/repo/scripts/pull-envs-for-all-packages.sh" ]; then
    cd "$APP_DIR/repo" && $BASH_CMD scripts/pull-envs-for-all-packages.sh >/dev/null 2>&1
    if [ $? -eq 0 ]; then
      echo "Environment variables updated successfully."
    else
      echo "Warning: Failed to update environment variables."
    fi
  else
    echo "Warning: Environment update script not found at $APP_DIR/repo/scripts/pull-envs-for-all-packages.sh"
  fi

  # Check if version has changed and services need to be updated
  if [ "$current_version" != "$1" ] && [ -n "$current_version" ]; then
    echo "Version changed from $current_version to $1. Updating services..."

    # Check if colima is running
    if colima status &>/dev/null; then
      # Pull the latest images
      echo "Pulling latest images for version $1..."

      # Check if containers are running and pull images
      if $DOCKER_CMD ps --format '{{.Names}}' 2>/dev/null | grep -q "^open-cuak-web$"; then
        echo "Pulling open-cuak-web image..."
        $DOCKER_CMD pull ghcr.io/aident-ai/open-cuak-web:$1
      fi

      if $DOCKER_CMD ps --format '{{.Names}}' 2>/dev/null | grep -q "^open-cuak-browserless$"; then
        echo "Pulling open-cuak-browserless image..."
        $DOCKER_CMD pull ghcr.io/aident-ai/open-cuak-browserless:$1
      fi

      # Restart services
      echo "Restarting services with new version..."
      restart_services
    else
      echo "Colima is not running. Start services with 'open-cuak start' to apply the new version."
    fi
  elif [ -z "$current_version" ]; then
    echo "No previous version found. Start services with 'open-cuak start' to apply the version."
  else
    echo "Version unchanged. No need to restart services."
  fi
}

logs() {
  # Check if a container name is provided
  if [ -z "$1" ]; then
    echo "Error: Container name is required."
    echo "Usage: open-cuak logs {web|browserless} [OPTIONS]"
    echo "Example: open-cuak logs web"
    echo "Example with options: open-cuak logs browserless --tail 100"
    return 1
  fi

  # Determine the container name based on the argument
  case "$1" in
  web)
    container_name="open-cuak-web"
    ;;
  browserless)
    container_name="open-cuak-browserless"
    ;;
  *)
    echo "Error: Unknown container '$1'."
    echo "Available containers: web, browserless"
    return 1
    ;;
  esac

  # Check if the container is running
  if ! $DOCKER_CMD ps --format '{{.Names}}' | grep -q "^${container_name}$"; then
    echo "Error: Container '$container_name' is not running."
    return 1
  fi

  # Shift the first argument to pass any remaining arguments to docker logs
  shift
  echo "Showing logs for container: $container_name"
  $DOCKER_CMD logs -f "$container_name" "$@"
}

help() {
  echo "Usage: open-cuak {init [--reset]|start|stop|restart|clear|status|stats|logs|version|use VERSION|help}"
  echo "Commands:"
  echo "  init [--reset]  - Initialize Open-CUAK services. Use --reset to clear existing repository and docker images."
  echo "  start           - Start Open-CUAK services"
  echo "  stop            - Stop Open-CUAK services"
  echo "  restart         - Restart Open-CUAK services"
  echo "  clear           - Clear Open-CUAK services and data"
  echo "  status          - Show the status of Open-CUAK services"
  echo "  stats           - Show Docker stats"
  echo "  logs            - Show logs for a specific container (web|browserless)"
  echo "  version         - Show CLI and app versions"
  echo "  use VERSION     - Set the version of Open-CUAK app image to pull (stable/latest/specific-sha)"
  echo "  help            - Show this help message"
}

case "$1" in
init)
  if [ "$2" == "--reset" ]; then
    init "--reset"
  else
    init
  fi
  ;;
start) start_services ;;
stop) stop_services ;;
restart) restart_services ;;
clear) clear ;;
status) status ;;
stats) stats ;;
logs) logs "$2" "${@:3}" ;;
version) version ;;
use) use "$2" ;;
help) help ;;
*) help ;;
esac
