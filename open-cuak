#!/bin/bash

APP_DIR="$HOME/.open-cuak"
LIBEXEC_DIR="$(dirname "$(realpath "$0")")"

init() {
  echo "Initializing Open-CUAK services..."

  mkdir -p "$APP_DIR"
  if [ -d "$APP_DIR/repo" ]; then
    echo "Removing existing repository directory..."
    rm -rf "$APP_DIR/repo"
  fi

  echo "Pulling latest code from repository..."
  curl -L https://github.com/Aident-AI/open-cuak/archive/refs/heads/main.zip -o "$APP_DIR/main.zip"
  unzip "$APP_DIR/main.zip" -d "$APP_DIR/temp"
  mv "$APP_DIR/temp/open-cuak-main" "$APP_DIR/repo"
  rm -rf "$APP_DIR/temp"
  rm "$APP_DIR/main.zip"
}

start_services() {
  if [ ! -d "$APP_DIR" ]; then
    echo "App not initialized. Starting app initialization..."
    init
  fi

  current_docker_context=$(docker context show | grep -o 'colima')
  if [ "$current_docker_context" = "colima" ]; then
    default_to_colima=true
  else
    default_to_colima=false
  fi
  if [ ! $default_to_colima ]; then
    docker context use colima
  else
    echo "Docker context already set to colima..."
  fi

  echo "Starting colima VM..."
  colima start --cpu 4 --memory 8 --disk 30 --mount-type virtiofs
  cd "$APP_DIR/repo" && bash quick-start.sh

  if [ !default_to_colima ]; then
    echo "Setting Docker context back to default..."
    docker context use default
  fi
}

stop_services() {
  echo "Stopping OpenCUAK services..."
  colima stop
}

restart_services() {
  if colima status &>/dev/null; then
    if colima list | grep -q "Running"; then
      echo "Open-CUAK services already running..."
      cd "$APP_DIR/repo" && bash quick-stop.sh
      cd "$APP_DIR/repo" && bash quick-start.sh
      return 0
    else
      echo "VM exists but not running. Starting Open-CUAK services..."
      start_services
    fi
  else
    echo "Colima VM does not exist. Starting the services from scratch..."
    start_services
  fi
}

clear() {
  echo "Clearing Open-CUAK services and data..."
  colima delete
}

status() {
  vm_ready=false
  server_ready=false
  supabase_ready=false
  supabase_username=""
  supabase_password=""
  if colima list 2>/dev/null | grep -q "Running"; then
    vm_ready=true
  fi

  get_env_value() {
    local file="$1"
    local key="$2"
    local value=""

    if [ -f "$file" ]; then
      value=$(grep "^${key}=" "$file" | sed "s/^${key}=//")
      value=$(echo "$value" | sed -e 's/^["\x27]//' -e 's/["\x27]$//')
    fi
    echo "$value"
  }

  app_env_path="$APP_DIR/repo/.env.production"
  supabase_env_path="$APP_DIR/repo/installer/supabase-docker/.env"
  if [ ! -f "$app_env_path" ]; then
    echo "App environment file not found at $app_env_path"
    exit 1
  fi
  if [ ! -f "$supabase_env_path" ]; then
    echo "Supabase environment file not found at $supabase_env_path"
    exit 1
  fi

  app_host=$(get_env_value "$app_env_path" "NEXT_PUBLIC_ORIGIN")
  supabase_host=$(get_env_value "$app_env_path" "NEXT_PUBLIC_SUPABASE_URL")
  supabase_username=$(get_env_value "$supabase_env_path" "DASHBOARD_USERNAME")
  supabase_password=$(get_env_value "$supabase_env_path" "DASHBOARD_PASSWORD")

  if $vm_ready; then
    response=$(curl -s -X POST -d "{}" "$app_host/api/ping")
    if echo "$response" | grep -q '"message":"pong"'; then
      server_ready=true
    fi

    if curl -s $supabase_host &>/dev/null; then
      supabase_ready=true
    fi
  fi

  echo "VM Ready: $vm_ready"
  echo "Server Ready: $server_ready"
  echo "Supabase Ready: $supabase_ready"
  if $supabase_ready; then
    echo "Service Status:"
    echo "  - OpenCUAK: http://localhost:3000"
    echo "  - Supabase Dashboard: http://localhost:8000"
    echo "    |- username: $supabase_username"
    echo "    |- password: $supabase_password"
  fi
}

stats() {
  docker context use colima
  docker stats
  docker context use default
}

version() {
  # Show CLI version from Homebrew formula
  if command -v brew &>/dev/null; then
    # Check if the formula is installed via Homebrew
    if brew list open-cuak &>/dev/null; then
      # Try to get version directly from brew info command
      CLI_VERSION=$(brew info open-cuak --json | grep -o '"version":"[^"]*' | head -1 | cut -d'"' -f4)
      if [ -z "$CLI_VERSION" ]; then
        # Fallback to formula file if available
        FORMULA_PATH=$(brew formula open-cuak)
        if [ -f "$FORMULA_PATH" ]; then
          CLI_VERSION=$(grep -o 'url.*v[0-9][0-9.]*' "$FORMULA_PATH" | grep -o 'v[0-9][0-9.]*' | head -1)
        fi
      fi

      # Clean up the version string - remove any trailing periods or unwanted characters
      CLI_VERSION=$(echo "$CLI_VERSION" | sed 's/[.]$//' | tr -cd 'v0-9.')

      if [ -n "$CLI_VERSION" ]; then
        echo "Open-CUAK CLI Version: ${CLI_VERSION} (Homebrew)"
      else
        echo "Open-CUAK CLI Version: Unknown (Could not determine Homebrew version)"
      fi
    else
      echo "Open-CUAK CLI Version: Unknown (Not installed via Homebrew)"
    fi
  else
    # Fallback to VERSION file if Homebrew is not available
    VERSION_FILE="${LIBEXEC_DIR}/VERSION"
    if [ -f "$VERSION_FILE" ]; then
      CLI_VERSION=$(cat "$VERSION_FILE" | tr -d '[:space:]')
      echo "Open-CUAK CLI Version: $CLI_VERSION (from VERSION file)"
    else
      echo "Open-CUAK CLI Version: Unknown (VERSION file not found)"
    fi
  fi

  # Show App version
  example_env_path="$APP_DIR/repo/.example.env.production"

  if [ ! -d "$APP_DIR/repo" ]; then
    echo "Repository not initialized. Run 'open-cuak init' first."
    return 1
  fi

  if [ -f "$example_env_path" ]; then
    version=$(grep "^OPEN_CUAK_VERSION=" "$example_env_path" | sed "s/^OPEN_CUAK_VERSION=//")
    version=$(echo "$version" | sed -e 's/^["\x27]//' -e 's/["\x27]$//')

    if [ -n "$version" ]; then
      echo "Open-CUAK App Version: $version"

      if [ "$version" = "stable" ] || [ "$version" = "latest" ]; then
        echo "  |- Using $version release channel"
      else
        echo "  |- Using specific commit/tag: $version"
      fi
    else
      echo "Open-CUAK App Version: Not set"
    fi
  else
    echo "Open-CUAK App Version: Not available (example environment file not found)"
  fi

  # Show Docker image SHAs
  current_docker_context=$(docker context show 2>/dev/null | grep -o 'colima')
  context_changed=false
  if [ "$current_docker_context" != "colima" ]; then
    if docker context ls 2>/dev/null | grep -q "colima"; then
      docker context use colima >/dev/null 2>&1
      context_changed=true
    fi
  fi

  # Check if colima is running
  if colima status &>/dev/null; then
    # Get open-cuak-web image info
    if docker ps --format '{{.Names}}' 2>/dev/null | grep -q "^open-cuak-web$"; then
      web_image_id=$(docker inspect --format='{{.Image}}' open-cuak-web 2>/dev/null)
      web_image_info=$(docker image inspect "$web_image_id" --format='{{index .RepoTags 0}} (SHA: {{.Id}})' 2>/dev/null)
      if [ -n "$web_image_info" ]; then
        echo "  |- open-cuak-web: $web_image_info"
      else
        echo "  |- open-cuak-web: Running but image info not available"
      fi
    else
      echo "  |- open-cuak-web: Not running"
    fi

    # Get open-cuak-browserless image info
    if docker ps --format '{{.Names}}' 2>/dev/null | grep -q "^open-cuak-browserless$"; then
      browserless_image_id=$(docker inspect --format='{{.Image}}' open-cuak-browserless 2>/dev/null)
      browserless_image_info=$(docker image inspect "$browserless_image_id" --format='{{index .RepoTags 0}} (SHA: {{.Id}})' 2>/dev/null)
      if [ -n "$browserless_image_info" ]; then
        echo "  |- open-cuak-browserless: $browserless_image_info"
      else
        echo "  |- open-cuak-browserless: Running but image info not available"
      fi
    else
      echo "  |- open-cuak-browserless: Not running"
    fi
  else
    echo "  |- Colima not running. Start services to view image information."
  fi

  # Restore Docker context if changed
  if [ "$context_changed" = true ]; then
    docker context use default >/dev/null 2>&1
  fi
}

use() {
  example_env_path="$APP_DIR/repo/.example.env.production"

  if [ ! -d "$APP_DIR/repo" ]; then
    echo "Repository not initialized. Run 'open-cuak init' first."
    exit 1
  fi

  # A version must be provided as an argument
  if [ -z "$1" ]; then
    echo "Error: Version argument is required."
    echo "Usage: open-cuak use VERSION"
    echo "Example: open-cuak use stable"
    exit 1
  fi

  # Store the current version before changing it
  current_version=""
  if [ -f "$example_env_path" ] && grep -q "^OPEN_CUAK_VERSION=" "$example_env_path"; then
    current_version=$(grep "^OPEN_CUAK_VERSION=" "$example_env_path" | sed "s/^OPEN_CUAK_VERSION=//" | sed -e 's/^["\x27]//' -e 's/["\x27]$//')
  fi

  if [ ! -f "$example_env_path" ]; then
    echo "Example environment file not found at $example_env_path"
    echo "Creating new .example.env.production file..."
    touch "$example_env_path"
  fi

  # Check if OPEN_CUAK_VERSION already exists in the file
  if grep -q "^OPEN_CUAK_VERSION=" "$example_env_path"; then
    # Replace existing value
    sed -i.bak "s/^OPEN_CUAK_VERSION=.*$/OPEN_CUAK_VERSION=$1/" "$example_env_path"
    rm -f "${example_env_path}.bak"
  else
    # Add new value
    echo "OPEN_CUAK_VERSION=$1" >>"$example_env_path"
  fi

  echo "App version set to: $1"

  # Pull environment variables for all packages
  echo "Updating environment variables for all packages..."
  if [ -f "$APP_DIR/repo/scripts/pull-envs-for-all-packages.sh" ]; then
    cd "$APP_DIR/repo" && bash scripts/pull-envs-for-all-packages.sh >/dev/null 2>&1
    if [ $? -eq 0 ]; then
      echo "Environment variables updated successfully."
    else
      echo "Warning: Failed to update environment variables."
    fi
  else
    echo "Warning: Environment update script not found at $APP_DIR/repo/scripts/pull-envs-for-all-packages.sh"
  fi

  # Check if version has changed and services need to be updated
  if [ "$current_version" != "$1" ] && [ -n "$current_version" ]; then
    echo "Version changed from $current_version to $1. Updating services..."

    # Check if colima is running
    if colima status &>/dev/null; then
      # Set Docker context to colima
      current_docker_context=$(docker context show 2>/dev/null | grep -o 'colima')
      context_changed=false
      if [ "$current_docker_context" != "colima" ]; then
        if docker context ls 2>/dev/null | grep -q "colima"; then
          docker context use colima >/dev/null 2>&1
          context_changed=true
        fi
      fi

      # Pull the latest images
      echo "Pulling latest images for version $1..."

      # Check if containers are running and pull images
      if docker ps --format '{{.Names}}' 2>/dev/null | grep -q "^open-cuak-web$"; then
        echo "Pulling open-cuak-web image..."
        docker pull ghcr.io/aident-ai/open-cuak-web:$1
      fi

      if docker ps --format '{{.Names}}' 2>/dev/null | grep -q "^open-cuak-browserless$"; then
        echo "Pulling open-cuak-browserless image..."
        docker pull ghcr.io/aident-ai/open-cuak-browserless:$1
      fi

      # Restart services
      echo "Restarting services with new version..."
      if [ -f "$APP_DIR/repo/quick-stop.sh" ] && [ -f "$APP_DIR/repo/quick-start.sh" ]; then
        cd "$APP_DIR/repo" && bash quick-stop.sh
        cd "$APP_DIR/repo" && bash quick-start.sh
        echo "Services restarted successfully with version $1."
      else
        echo "Warning: quick-stop.sh or quick-start.sh not found. Attempting to restart services..."
        restart_services
      fi

      # Restore Docker context if changed
      if [ "$context_changed" = true ]; then
        docker context use default >/dev/null 2>&1
      fi
    else
      echo "Colima is not running. Start services with 'open-cuak start' to apply the new version."
    fi
  elif [ -z "$current_version" ]; then
    echo "No previous version found. Start services with 'open-cuak start' to apply the version."
  else
    echo "Version unchanged. No need to restart services."
  fi
}

logs() {
  # Check if a container name is provided
  if [ -z "$1" ]; then
    echo "Error: Container name is required."
    echo "Usage: open-cuak logs {web|browserless} [OPTIONS]"
    echo "Example: open-cuak logs web"
    echo "Example with options: open-cuak logs browserless --tail 100"
    return 1
  fi

  # Set the Docker context to colima
  current_docker_context=$(docker context show | grep -o 'colima')
  if [ "$current_docker_context" != "colima" ]; then
    docker context use colima
  fi

  # Determine the container name based on the argument
  case "$1" in
  web)
    container_name="open-cuak-web"
    ;;
  browserless)
    container_name="open-cuak-browserless"
    ;;
  *)
    echo "Error: Unknown container '$1'."
    echo "Available containers: web, browserless"
    docker context use default 2>/dev/null
    return 1
    ;;
  esac

  # Check if the container is running
  if ! docker ps --format '{{.Names}}' | grep -q "^${container_name}$"; then
    echo "Error: Container '$container_name' is not running."
    docker context use default 2>/dev/null
    return 1
  fi

  # Shift the first argument to pass any remaining arguments to docker logs
  shift
  echo "Showing logs for container: $container_name"
  docker logs -f "$container_name" "$@"

  # Set Docker context back to default if it wasn't colima initially
  if [ "$current_docker_context" != "colima" ]; then
    echo "Setting Docker context back to default..."
    docker context use default
  fi
}

help() {
  echo "Usage: open-cuak {init|start|stop|restart|clear|status|stats|logs|version|use VERSION|help}"
  echo "Commands:"
  echo "  init        - Initialize Open-CUAK services"
  echo "  start       - Start Open-CUAK services"
  echo "  stop        - Stop Open-CUAK services"
  echo "  restart     - Restart Open-CUAK services"
  echo "  clear       - Clear Open-CUAK services and data"
  echo "  status      - Show the status of Open-CUAK services"
  echo "  stats       - Show Docker stats"
  echo "  logs        - Show logs for a specific container (web|browserless)"
  echo "  version     - Show CLI and app versions"
  echo "  use VERSION - Set the version of Open-CUAK app image to pull (stable/latest/specific-sha)"
  echo "  help        - Show this help message"
}

case "$1" in
init) init ;;
start) start_services ;;
stop) stop_services ;;
restart) restart_services ;;
clear) clear ;;
status) status ;;
stats) stats ;;
logs) logs "$2" "${@:3}" ;;
version) version ;;
use) use "$2" ;;
help) help ;;
*) help ;;
esac
